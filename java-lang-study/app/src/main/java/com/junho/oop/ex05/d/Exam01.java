// 기존의 클래스를 손대지 않고 새 기능만 추가한다.
// 어떻게? 상속 문법을 이용한다.
package com.junho.oop.ex05.d;

public class Exam01 {
  public static void main(String[] args) {
    // 상속
    // => 기존 클래스의 코드를 손대지 않고 기능을 확장하게 도와주는 문법이다.
    // => 재사용할 기존 클래스를 지정한다.

    // 새 프로젝트에서는 제조사, 모델명, 수용인원 외에 
    // 썬루프 장착여부, 자동변속 여부를 추가적으로 저장하고 싶다!
    // 
    // 방법3) 상속을 이용하여 기능을 추가한 클래스를 사용한다.
    //       장점:
    //       => 기존 코드에 문제가 있으면 그 코드를 수정하는 순간 
    //          그 코드를 상속 받아 만든 모든 클래스에 자동으로 적용된다.
    //       => 기존 코드를 손대지 않기 때문에 새 기능을 추가하더라도
    //          기존 기능에 문제가 발생할 가능성이 거의 없다.
    //       => 소스 코드의 유지보수가 쉽다.
    Sedan s = new Sedan("제네시스", "현대자동차", 5, true, true);
    System.out.printf("모델: %s, 제조사: %s, 수용인원: %d, 썬루프장착 여부: %b, auto여부: %b",
        s.model, s.maker, s.capacity, s.sunroof, s.auto);
  }

  //이것이 상속이라는 문법이 등장한 이유이다.
  // => 즉 기존 코드의 수정을 최소화하면서 새 기능을 추가하는 방법!
  // => 기존 기능을 재작성하지 않고 다시 사용할 수 있게 만드는 문법이다.
  // => 코드 재사용성을 높인다.

  // 단, 상속의 단점은
  // 우리가 사용하지 않는 기능 까지 다 상속 받아야한다 라는 단점은 잇다.

}
